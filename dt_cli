#!/bin/bash

if [[ $(id -u) != 0 ]]; then
	clear
    whiptail --title "错误信息" --msgbox "请在root用户下执行" 8 78 
	exit 1
fi

if [[ $(uname -m 2> /dev/null) != x86_64 ]]; then
	clear
    whiptail --title "错误信息" --msgbox "请在64位系统下运行此脚本" 8 78 
	exit 1
fi

ms="https://raw.githubusercontent.com/pzwsquare/dt_client/master/v2"
sd="https://github.com/pymumu/smartdns/releases/download/Release30/smartdns.1.2020.02.25-2212.x86_64-debian-all.deb"


install_pre(){
systemctl stop iptables-proxy > /dev/null 2>&1

modprobe xt_TPROXY
echo "xt_TPROXY" > '/etc/modules-load.d/TPROXY.conf'

cat << EOF > /etc/security/limits.conf
* soft nofile 1000000
* hard nofile 1000000
* soft nproc 1000000
* hard nproc 1000000
EOF
echo "ulimit -n 1000000" > ~/.bash_profile

cat << EOF > /etc/sysctl.conf
kernel.sysrq = 0
kernel.core_uses_pid = 1
kernel.randomize_va_space = 2
kernel.pid_max = 1000000
vm.overcommit_memory = 1
vm.swappiness = 10
fs.file-max = 1000000
fs.inotify.max_user_instances = 1000000
fs.inotify.max_user_watches = 1000000
fs.protected_hardlinks = 1
fs.protected_symlinks = 1
net.core.netdev_max_backlog = 32768
net.core.optmem_max = 8388608
net.core.rmem_max = 8388608
net.core.rmem_default = 8388608
net.core.wmem_max = 8388608
net.core.wmem_default = 8388608
net.core.somaxconn = 32768
#net.nf_conntrack_max = 1000000
#net.netfilter.nf_conntrack_checksum=0
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.send_redirects = 1
net.ipv4.conf.default.send_redirects = 1
net.ipv4.conf.all.accept_redirects = 1
net.ipv4.conf.default.accept_redirects = 1
net.ipv4.conf.all.secure_redirects = 1
net.ipv4.conf.default.secure_redirects = 1
net.ipv4.conf.all.accept_source_route = 1
net.ipv4.conf.default.accept_source_route = 1
net.ipv4.ip_forward = 1
net.ipv4.ip_local_port_range = 1025 65535
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_fin_timeout = 15
net.ipv4.tcp_orphan_retries = 2
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_sack = 1
net.ipv4.tcp_dsack = 1
net.ipv4.tcp_fack = 1
net.ipv4.tcp_max_syn_backlog = 32768
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.tcp_max_orphans = 32768
net.ipv4.tcp_rmem = 4096 87380 8388608
net.ipv4.tcp_wmem = 4096 87380 8388608
net.ipv4.tcp_keepalive_time = 1800
net.ipv4.tcp_keepalive_intvl = 15
net.ipv4.tcp_keepalive_probes = 3
net.ipv4.tcp_ecn = 0
net.ipv4.tcp_rfc1337 = 1
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = bbr
EOF

sysctl -p

# sed -i '/ip6-/d' /etc/hosts

# systemctl mask --now systemd-resolved > /dev/null 2>&1
# systemctl daemon-reload > /dev/null 2>&1
# rm -rf /run/resolvconf/interface/systemd-resolved

}

install_sdns(){
wget -O ~/smartdns.deb $sd
dpkg -i ~/smartdns.deb

cat << EOF > /etc/smartdns/smartdns.conf
bind :5598 -group g1
bind :5599 -group g2
cache-size 204800
prefetch-domain yes
rr-ttl 86400
rr-ttl-min 60
rr-ttl-max 86400
force-AAAA-SOA yes
log-level info
log-file /var/log/smartdns.log
log-size 128k
log-num 2
server 223.5.5.5 -group g1
server 114.114.114.114 -group g1
# default port is 853
server-tls 1.1.1.1 -group g2
# default port is 443
server-https https://cloudflare-dns.com/dns-query -group g2
EOF

echo "" > /run/smartdns.pid
cat << EOF > /lib/systemd/system/smartdns.service
[Unit]
Description=Smart DNS server
After=network-online.target
Before=nss-lookup.target
Wants=network-online.target
[Service]
Type=forking
PIDFile=/run/smartdns.pid
EnvironmentFile=/etc/default/smartdns
ExecStart=/usr/sbin/smartdns $SMART_DNS_OPTS
KillMode=process
Restart=always
RestartSec=2s
LimitNPROC=1000000
LimitNOFILE=1000000
[Install]
WantedBy=multi-user.target
EOF
rm -rf ~/smartdns.deb

systemctl daemon-reload > /dev/null 2>&1
systemctl enable smartdns > /dev/null 2>&1
systemctl restart smartdns > /dev/null 2>&1

}

install_trojan(){
bash -c "$(wget -O- https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)"

cat << EOF > /usr/local/etc/trojan/config.json
{
    "run_type": "client",
    "local_addr": "127.0.0.1",
    "local_port": 1080,
    "remote_addr": "$svr_domain",
    "remote_port": 443,
    "password": [
        "$svr_pwd"
    ],
    "log_level": 1,
    "ssl": {
        "verify": true,
        "verify_hostname": true,
        "cert": "",
        "cipher": "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:AES128-SHA:AES256-SHA:DES-CBC3-SHA",
        "cipher_tls13": "TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384",
        "sni": "$svr_domain",
        "alpn": [
            "h2",
            "http/1.1"
        ],
        "reuse_session": true,
        "session_ticket": false,
        "curves": ""
    },
    "tcp": {
        "no_delay": true,
        "keep_alive": true,
        "reuse_port": false,
        "fast_open": false,
        "fast_open_qlen": 20
    }
}
EOF

    systemctl enable trojan > /dev/null 2>&1
    systemctl start trojan > /dev/null 2>&1
}


install_v2ray(){
cd ~
mkdir -p /usr/bin/v2ray
mkdir -p /etc/v2ray

wget --no-check-certificate -O ~/vtrui.zip $ms/vtamd64.zip

unzip vtrui.zip
mv -f ~/vtrui/vtrui /usr/bin/v2ray/v2ray
mv -f ~/vtrui/v2ctl /usr/bin/v2ray/v2ctl
mv -f ~/vtrui/geoip.dat /usr/bin/v2ray/geoip.dat
mv -f ~/vtrui/geosite.dat /usr/bin/v2ray/geosite.dat
rm -rf ~/vtrui*
chmod +x /usr/bin/v2ray/v2ray
chmod +x /usr/bin/v2ray/v2ctl

cat << EOF > /etc/v2ray/config.json
{
  "inbounds": [
    {
      "tag":"transparent",
      "port": 12345,
      "protocol": "dokodemo-door",
      "settings":{"network":"tcp,udp","followRedirect": true},
      "sniffing":{"enabled":true,"destOverride":["http","tls"]},
      "streamSettings":{"sockopt":{"tproxy":"tproxy"}}
    }
  ],
  "outbounds": [
    {
      "tag": "proxy",
      "protocol": "socks",
      "settings": {"servers": [{"address": "127.0.0.1","port": 1080}]},
      "streamSettings": {"sockopt": {"mark": 255}}
    },
    {
      "tag": "direct",
      "protocol": "freedom",
      "settings": {"domainStrategy": "UseIP"},
      "streamSettings": {"sockopt": {"mark": 255}}
    },
    {
      "tag": "dns-out",
      "protocol": "dns",
      "streamSettings": {"sockopt": {"mark": 255}
      }  
    }
	],
  "dns": {
     "servers": [
     {
       "address": "127.0.0.1",
       "port": 5598,
       "domains": [
         "geosite:cn"
       ],
       "expectIPs": [
         "geoip:cn"
       ]
     },
     {
       "address": "127.0.0.1",
       "port": 5599,
       "domains": [
         "geosite:geolocation-!cn"
        // "geosite:speedtest",
        // "ext:h2y.dat:gfw"
       ]
     },
     "localhost"
   ]
  },
  "routing": {
    "domainStrategy": "UseIP",
    "rules": [
      {"type":"field","inboundTag":"transparent","outboundTag":"dns-out","network":"udp"},
      {"type":"field","outboundTag":"direct","ip":"127.0.0.1"},
      {"type":"field","ip":"127.0.0.1","outboundTag": "proxy"},
       //切换全局 
      {"type":"field","ip":["geoip:private","geoip:cn"],"outboundTag":"direct"},
      {"type":"field","domain":["geosite:cn"],"outboundTag":"direct"}
    ]
  }
}
EOF


echo "" > /run/v2ray.pid
cat << EOF > /lib/systemd/system/v2ray.service
[Unit]
Description=v2ray Service
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
PIDFile=/run/v2ray.pid
AmbientCapabilities=CAP_NET_BIND_SERVICE
ExecStart=/usr/bin/v2ray/v2ray -config /etc/v2ray/config.json
Restart=always
RestartSec=5
# LimitNPROC=1000000
# LimitNOFILE=1000000
# LimitNPROC=500
# LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload > /dev/null 2>&1
systemctl enable v2ray > /dev/null 2>&1
systemctl restart v2ray > /dev/null 2>&1

}

instll_pihole(){

cd ~
mkdir -p /etc/pihole
echo "" > /etc/pihole/adlists.list

cat << EOF > /etc/pihole/setupVars.conf
PIHOLE_INTERFACE=$eth_n
IPV4_ADDRESS=$loc_ip/24
PIHOLE_DNS_1=127.0.0.1#5598
PIHOLE_DNS_2=
QUERY_LOGGING=true
INSTALL_WEB_SERVER=true
INSTALL_WEB_INTERFACE=true
LIGHTTPD_ENABLED=true
BLOCKING_ENABLED=true
WEBPASSWORD=$pi_wd
#DNSMASQ_LISTENING=single
#DNS_FQDN_REQUIRED=true
#DNS_BOGUS_PRIV=true
#DNSSEC=false
#CONDITIONAL_FORWARDING=false
EOF

cd ~

git clone --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole
bash ~/Pi-hole/"automated install"/basic-install.sh /dev/stdin --unattended
rm -rf ~/Pi-hole

systemctl mask --now dhcpcd > /dev/null 2>&1
systemctl daemon-reload > /dev/null 2>&1

cat << EOF > /etc/pihole/pihole-FTL.conf
PRIVACYLEVEL=0
AAAA_QUERY_ANALYSIS=no
EOF

pihole restartdns
}


install_Iptables_Proxy(){

temp_ip=(${loc_ip//./ })

jy_ip=${temp_ip[0]}"."${temp_ip[1]}".0.0"

cat << EOF > /usr/local/bin/iptables_proxy
#!/bin/bash
# 设置策略路由
ip rule add fwmark 0x9 table 100 pref 100
ip route add local 0.0.0.0/0 dev lo table 100

# iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
# iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP

# iptables -A INPUT -p tcp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT
# iptables -A INPUT -p udp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT

# iptables -A INPUT -p tcp --dport 5598 -i $eth_n -j DROP
# iptables -A INPUT -p udp --dport 5598 -i $eth_n -j DROP
# iptables -A INPUT -p tcp --dport 5599 -i $eth_n -j DROP
# iptables -A INPUT -p udp --dport 5599 -i $eth_n -j DROP

# 代理局域网设备
iptables -t mangle -N V2RAY

iptables -t mangle -A V2RAY -p tcp --dport 5598 -j ACCEPT
iptables -t mangle -A V2RAY -p udp --dport 5598 -j ACCEPT

iptables -t mangle -A V2RAY -p tcp --dport 5599 -j ACCEPT
iptables -t mangle -A V2RAY -p udp --dport 5599 -j ACCEPT

iptables -t mangle -A V2RAY -d 127.0.0.1/32 -j RETURN
iptables -t mangle -A V2RAY -d 224.0.0.0/4 -j RETURN 
iptables -t mangle -A V2RAY -d 255.255.255.255/32 -j RETURN 
iptables -t mangle -A V2RAY -d $jy_ip/16 -p tcp -j RETURN
iptables -t mangle -A V2RAY -d $jy_ip/16 -p udp ! --dport 53 -j RETURN
iptables -t mangle -A V2RAY -p udp -j TPROXY --on-port 12345 --tproxy-mark 0x9
iptables -t mangle -A V2RAY -p tcp -j TPROXY --on-port 12345 --tproxy-mark 0x9
iptables -t mangle -A PREROUTING -j V2RAY # 应用规则
EOF
chmod +x /usr/local/bin/iptables_proxy

cat << EOF > /lib/systemd/system/iptables-proxy.service
[Unit]
Description=iptables-proxy
After=network.target
Wants=network.target
[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/iptables_proxy
[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload > /dev/null 2>&1
systemctl enable iptables-proxy > /dev/null 2>&1
systemctl restart iptables-proxy > /dev/null 2>&1


}

set_ip_dns(){

cat << EOF > /etc/network/interfaces
source /etc/network/interfaces.d/*

auto lo

auto  $eth_n
iface $eth_n inet static
  address $loc_ip
  netmask 255.255.255.0
  gateway $gate_ip
EOF

# cat << EOF > /etc/resolv.conf
# nameserver 127.0.0.1
# nameserver 8.8.8.8
# nameserver 114.114.114.114
# EOF

}

replace_svr(){
  bash <(wget --no-check-certificate -qO- https://git.io/JvPph)
}


install_tropxy(){

    while [[ -z ${loc_ip} ]]; do
        loc_ip=$(whiptail --inputbox --nocancel "输入本机IP（现在安装灯塔客户端机器的ip）" 8 78 --title "输入域名" 3>&1 1>&2 2>&3)
    done

    while [[ -z ${gate_ip} ]]; do
        gate_ip=$(whiptail --inputbox --nocancel "输入网关IP（输入网关IP（ros的ip或者爱快ip）" 8 78 --title "输入域名" 3>&1 1>&2 2>&3)
    done

    while [[ -z ${svr_domain} ]]; do
        svr_domain=$(whiptail --inputbox --nocancel "灯塔服务端域名" 8 78 --title "输入域名" 3>&1 1>&2 2>&3)
    done

    while [[ -z ${svr_pwd} ]]; do
        svr_pwd=$(whiptail --inputbox --nocancel "灯塔服务端密码" 8 78 --title "输入密码" 3>&1 1>&2 2>&3)
    done

cd ~

# green "========================="
# green " 开始安装依赖文件"
# green "========================="
install_pre

cat > /etc/apt/sources.list << EOF
deb http://mirrors.aliyun.com/debian $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) main
deb http://mirrors.aliyun.com/debian-security $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1)/updates main
deb http://mirrors.aliyun.com/debian $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1)-updates main
EOF

rm -rf /etc/apt/sources.list.d/unstable.list
rm -rf /etc/apt/preferences.d/limit-unstable

apt update && apt upgrade -y
apt install --no-install-recommends --no-install-suggests -y sudo locales net-tools dnsutils ipset wget curl unzip zip git
source /etc/profile

# green "========================="
# green " 开始安装smartdns"
# green "========================="
install_sdns

# green "========================="
# green " 开始安装trojan"
# green "========================="
install_trojan

# green "========================="
# green " 开始安装v2ray"
# green "========================="
install_v2ray

# green "========================="
# green " 开始设置防火墙"
# green "========================="
install_Iptables_Proxy

# green "========================="
# green " 开始安装pihole"
# green "========================="
instll_pihole

# green "========================="
# green " 开始设置本机固定IP"
# green "========================="
set_ip_dns
}


dt_menu() {

    Mainmenu=$(whiptail --clear --ok-button "确定" --backtitle "version:20200320v1" --title "灯塔客户端v2.0" --menu --nocancel "
**********************************************************************************
简介：灯塔客户端v2.0
系统：>=debian9
Youtube：米月
电报群：https://t.me/mi_yue
Youtube频道地址：https://t.im/n21o
**********************************************************************************
请选择需要安装的内容：
    " 22 86 5\
        "1" " 安装客户端"\
        "2" " 更换灯塔服务端"\
        "3" " 全局模式切换"\
        "4" " 退出" 3>&1 1>&2 2>&3)
    case $Mainmenu in
        1)
        install_tropxy
        whiptail --title "灯塔客户端安装成功" --msgbox "
*************************************************************************
灯塔客户端安装成功，把需要留学机器的网关和dns改成灯塔客户端ip。软路由请自行修改。

灯塔客户端IP：$loc_ip
Youtube：米月
电报群：https://t.me/mi_yue
Youtube频道地址：https://t.im/n21o
DNS上游修改地址：/etc/smartdns/smartdns.conf
*************************************************************************" 18 78
        clear
        ;;
        2)
        replace_svr
                whiptail --title "灯塔服务端更换成功" --msgbox "
*************************************************************************
灯塔服务端更换成功。

更换后灯塔服务端域名：$svr_domain
更换后灯塔服务端密码：$svr_pwd
Youtube：米月
电报群：https://t.me/mi_yue
Youtube频道地址：https://t.im/n21o
DNS上游修改地址：/etc/smartdns/smartdns.conf
*************************************************************************" 18 78
        clear
        ;;
        3)
        ;;
        4)
        #exit
        clear
        whiptail --title "脚本已退出" --msgbox "真希望把你留住" 8 78
        ;;
        esac
}


eth_n=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)

pi_wd="4739aedfec7b085af55a29976725a386ad39c9d88f1228c6cffe4ee52971b206"

dt_menu